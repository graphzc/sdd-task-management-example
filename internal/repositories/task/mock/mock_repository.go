// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_task

import (
	"context"

	"github.com/graphzc/sdd-task-management-example/internal/domain/entities"
	"github.com/graphzc/sdd-task-management-example/internal/domain/enums"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, task *entities.Task) (string, error) {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Task) (string, error)); ok {
		return returnFunc(ctx, task)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Task) string); ok {
		r0 = returnFunc(ctx, task)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.Task) error); ok {
		r1 = returnFunc(ctx, task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entities.Task
func (_e *MockRepository_Expecter) Create(ctx interface{}, task interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, task)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, task *entities.Task)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Task
		if args[1] != nil {
			arg1 = args[1].(*entities.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(s string, err error) *MockRepository_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, task *entities.Task) (string, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteByID(ctx context.Context, taskID string) error {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *MockRepository_Expecter) DeleteByID(ctx interface{}, taskID interface{}) *MockRepository_DeleteByID_Call {
	return &MockRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, taskID)}
}

func (_c *MockRepository_DeleteByID_Call) Run(run func(ctx context.Context, taskID string)) *MockRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteByID_Call) Return(err error) *MockRepository_DeleteByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteByID_Call) RunAndReturn(run func(ctx context.Context, taskID string) error) *MockRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockRepository
func (_mock *MockRepository) FindByID(ctx context.Context, taskID string) (*entities.Task, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entities.Task, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entities.Task); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *MockRepository_Expecter) FindByID(ctx interface{}, taskID interface{}) *MockRepository_FindByID_Call {
	return &MockRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, taskID)}
}

func (_c *MockRepository_FindByID_Call) Run(run func(ctx context.Context, taskID string)) *MockRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_FindByID_Call) Return(task *entities.Task, err error) *MockRepository_FindByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, taskID string) (*entities.Task, error)) *MockRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserID provides a mock function for the type MockRepository
func (_mock *MockRepository) FindByUserID(ctx context.Context, userID string) ([]entities.Task, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []entities.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]entities.Task, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []entities.Task); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserID'
type MockRepository_FindByUserID_Call struct {
	*mock.Call
}

// FindByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockRepository_Expecter) FindByUserID(ctx interface{}, userID interface{}) *MockRepository_FindByUserID_Call {
	return &MockRepository_FindByUserID_Call{Call: _e.mock.On("FindByUserID", ctx, userID)}
}

func (_c *MockRepository_FindByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockRepository_FindByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_FindByUserID_Call) Return(tasks []entities.Task, err error) *MockRepository_FindByUserID_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockRepository_FindByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]entities.Task, error)) *MockRepository_FindByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateByID(ctx context.Context, taskID string, title string, description string, priority enums.TaskPriority) error {
	ret := _mock.Called(ctx, taskID, title, description, priority)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, enums.TaskPriority) error); ok {
		r0 = returnFunc(ctx, taskID, title, description, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockRepository_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - title string
//   - description string
//   - priority enums.TaskPriority
func (_e *MockRepository_Expecter) UpdateByID(ctx interface{}, taskID interface{}, title interface{}, description interface{}, priority interface{}) *MockRepository_UpdateByID_Call {
	return &MockRepository_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, taskID, title, description, priority)}
}

func (_c *MockRepository_UpdateByID_Call) Run(run func(ctx context.Context, taskID string, title string, description string, priority enums.TaskPriority)) *MockRepository_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 enums.TaskPriority
		if args[4] != nil {
			arg4 = args[4].(enums.TaskPriority)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateByID_Call) Return(err error) *MockRepository_UpdateByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, title string, description string, priority enums.TaskPriority) error) *MockRepository_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusByID provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateStatusByID(ctx context.Context, taskID string, status enums.TaskStatus) error {
	ret := _mock.Called(ctx, taskID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, enums.TaskStatus) error); ok {
		r0 = returnFunc(ctx, taskID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusByID'
type MockRepository_UpdateStatusByID_Call struct {
	*mock.Call
}

// UpdateStatusByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - status enums.TaskStatus
func (_e *MockRepository_Expecter) UpdateStatusByID(ctx interface{}, taskID interface{}, status interface{}) *MockRepository_UpdateStatusByID_Call {
	return &MockRepository_UpdateStatusByID_Call{Call: _e.mock.On("UpdateStatusByID", ctx, taskID, status)}
}

func (_c *MockRepository_UpdateStatusByID_Call) Run(run func(ctx context.Context, taskID string, status enums.TaskStatus)) *MockRepository_UpdateStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 enums.TaskStatus
		if args[2] != nil {
			arg2 = args[2].(enums.TaskStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateStatusByID_Call) Return(err error) *MockRepository_UpdateStatusByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateStatusByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, status enums.TaskStatus) error) *MockRepository_UpdateStatusByID_Call {
	_c.Call.Return(run)
	return _c
}
