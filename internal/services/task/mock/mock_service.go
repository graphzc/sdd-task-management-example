// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_task

import (
	"context"

	"github.com/graphzc/sdd-task-management-example/internal/domain/entities"
	"github.com/graphzc/sdd-task-management-example/internal/services/task"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function for the type MockService
func (_mock *MockService) CreateTask(ctx context.Context, in *task.TaskCreateInput, userID string) error {
	ret := _mock.Called(ctx, in, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *task.TaskCreateInput, string) error); ok {
		r0 = returnFunc(ctx, in, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockService_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *task.TaskCreateInput
//   - userID string
func (_e *MockService_Expecter) CreateTask(ctx interface{}, in interface{}, userID interface{}) *MockService_CreateTask_Call {
	return &MockService_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, in, userID)}
}

func (_c *MockService_CreateTask_Call) Run(run func(ctx context.Context, in *task.TaskCreateInput, userID string)) *MockService_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *task.TaskCreateInput
		if args[1] != nil {
			arg1 = args[1].(*task.TaskCreateInput)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_CreateTask_Call) Return(err error) *MockService_CreateTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_CreateTask_Call) RunAndReturn(run func(ctx context.Context, in *task.TaskCreateInput, userID string) error) *MockService_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTaskByID provides a mock function for the type MockService
func (_mock *MockService) DeleteTaskByID(ctx context.Context, taskID string, userID string) error {
	ret := _mock.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, taskID, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTaskByID'
type MockService_DeleteTaskByID_Call struct {
	*mock.Call
}

// DeleteTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - userID string
func (_e *MockService_Expecter) DeleteTaskByID(ctx interface{}, taskID interface{}, userID interface{}) *MockService_DeleteTaskByID_Call {
	return &MockService_DeleteTaskByID_Call{Call: _e.mock.On("DeleteTaskByID", ctx, taskID, userID)}
}

func (_c *MockService_DeleteTaskByID_Call) Run(run func(ctx context.Context, taskID string, userID string)) *MockService_DeleteTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_DeleteTaskByID_Call) Return(err error) *MockService_DeleteTaskByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, userID string) error) *MockService_DeleteTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindTaskByID provides a mock function for the type MockService
func (_mock *MockService) FindTaskByID(ctx context.Context, taskID string, userID string) (*entities.Task, error) {
	ret := _mock.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindTaskByID")
	}

	var r0 *entities.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*entities.Task, error)); ok {
		return returnFunc(ctx, taskID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *entities.Task); ok {
		r0 = returnFunc(ctx, taskID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, taskID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_FindTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTaskByID'
type MockService_FindTaskByID_Call struct {
	*mock.Call
}

// FindTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - userID string
func (_e *MockService_Expecter) FindTaskByID(ctx interface{}, taskID interface{}, userID interface{}) *MockService_FindTaskByID_Call {
	return &MockService_FindTaskByID_Call{Call: _e.mock.On("FindTaskByID", ctx, taskID, userID)}
}

func (_c *MockService_FindTaskByID_Call) Run(run func(ctx context.Context, taskID string, userID string)) *MockService_FindTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_FindTaskByID_Call) Return(task1 *entities.Task, err error) *MockService_FindTaskByID_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *MockService_FindTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, userID string) (*entities.Task, error)) *MockService_FindTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindTaskByUserID provides a mock function for the type MockService
func (_mock *MockService) FindTaskByUserID(ctx context.Context, userID string) ([]entities.Task, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindTaskByUserID")
	}

	var r0 []entities.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]entities.Task, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []entities.Task); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_FindTaskByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTaskByUserID'
type MockService_FindTaskByUserID_Call struct {
	*mock.Call
}

// FindTaskByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockService_Expecter) FindTaskByUserID(ctx interface{}, userID interface{}) *MockService_FindTaskByUserID_Call {
	return &MockService_FindTaskByUserID_Call{Call: _e.mock.On("FindTaskByUserID", ctx, userID)}
}

func (_c *MockService_FindTaskByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockService_FindTaskByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_FindTaskByUserID_Call) Return(tasks []entities.Task, err error) *MockService_FindTaskByUserID_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockService_FindTaskByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]entities.Task, error)) *MockService_FindTaskByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskByID provides a mock function for the type MockService
func (_mock *MockService) UpdateTaskByID(ctx context.Context, taskID string, in *task.TaskUpdateInput, userID string) error {
	ret := _mock.Called(ctx, taskID, in, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *task.TaskUpdateInput, string) error); ok {
		r0 = returnFunc(ctx, taskID, in, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_UpdateTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskByID'
type MockService_UpdateTaskByID_Call struct {
	*mock.Call
}

// UpdateTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - in *task.TaskUpdateInput
//   - userID string
func (_e *MockService_Expecter) UpdateTaskByID(ctx interface{}, taskID interface{}, in interface{}, userID interface{}) *MockService_UpdateTaskByID_Call {
	return &MockService_UpdateTaskByID_Call{Call: _e.mock.On("UpdateTaskByID", ctx, taskID, in, userID)}
}

func (_c *MockService_UpdateTaskByID_Call) Run(run func(ctx context.Context, taskID string, in *task.TaskUpdateInput, userID string)) *MockService_UpdateTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *task.TaskUpdateInput
		if args[2] != nil {
			arg2 = args[2].(*task.TaskUpdateInput)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockService_UpdateTaskByID_Call) Return(err error) *MockService_UpdateTaskByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_UpdateTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, in *task.TaskUpdateInput, userID string) error) *MockService_UpdateTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskStatusByID provides a mock function for the type MockService
func (_mock *MockService) UpdateTaskStatusByID(ctx context.Context, taskID string, in *task.TaskUpdateStatusInput, userID string) error {
	ret := _mock.Called(ctx, taskID, in, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatusByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *task.TaskUpdateStatusInput, string) error); ok {
		r0 = returnFunc(ctx, taskID, in, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_UpdateTaskStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskStatusByID'
type MockService_UpdateTaskStatusByID_Call struct {
	*mock.Call
}

// UpdateTaskStatusByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - in *task.TaskUpdateStatusInput
//   - userID string
func (_e *MockService_Expecter) UpdateTaskStatusByID(ctx interface{}, taskID interface{}, in interface{}, userID interface{}) *MockService_UpdateTaskStatusByID_Call {
	return &MockService_UpdateTaskStatusByID_Call{Call: _e.mock.On("UpdateTaskStatusByID", ctx, taskID, in, userID)}
}

func (_c *MockService_UpdateTaskStatusByID_Call) Run(run func(ctx context.Context, taskID string, in *task.TaskUpdateStatusInput, userID string)) *MockService_UpdateTaskStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *task.TaskUpdateStatusInput
		if args[2] != nil {
			arg2 = args[2].(*task.TaskUpdateStatusInput)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockService_UpdateTaskStatusByID_Call) Return(err error) *MockService_UpdateTaskStatusByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_UpdateTaskStatusByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, in *task.TaskUpdateStatusInput, userID string) error) *MockService_UpdateTaskStatusByID_Call {
	_c.Call.Return(run)
	return _c
}
