// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_common

import (
	"context"

	"github.com/graphzc/sdd-task-management-example/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// HealthCheck provides a mock function for the type MockHandler
func (_mock *MockHandler) HealthCheck(ctx context.Context, v any) (dto.HealthCheckResponse, error) {
	ret := _mock.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 dto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (dto.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) dto.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, v)
	} else {
		r0 = ret.Get(0).(dto.HealthCheckResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockHandler_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - v any
func (_e *MockHandler_Expecter) HealthCheck(ctx interface{}, v interface{}) *MockHandler_HealthCheck_Call {
	return &MockHandler_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx, v)}
}

func (_c *MockHandler_HealthCheck_Call) Run(run func(ctx context.Context, v any)) *MockHandler_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_HealthCheck_Call) Return(healthCheckResponse dto.HealthCheckResponse, err error) *MockHandler_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockHandler_HealthCheck_Call) RunAndReturn(run func(ctx context.Context, v any) (dto.HealthCheckResponse, error)) *MockHandler_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}
