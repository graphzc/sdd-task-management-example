// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_task

import (
	"context"

	"github.com/graphzc/sdd-task-management-example/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function for the type MockHandler
func (_mock *MockHandler) CreateTask(ctx context.Context, req *dto.TaskCreateRequest, userID string) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskCreateRequest, string) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, req, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskCreateRequest, string) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.TaskCreateRequest, string) error); ok {
		r1 = returnFunc(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockHandler_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.TaskCreateRequest
//   - userID string
func (_e *MockHandler_Expecter) CreateTask(ctx interface{}, req interface{}, userID interface{}) *MockHandler_CreateTask_Call {
	return &MockHandler_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, req, userID)}
}

func (_c *MockHandler_CreateTask_Call) Run(run func(ctx context.Context, req *dto.TaskCreateRequest, userID string)) *MockHandler_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.TaskCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.TaskCreateRequest)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHandler_CreateTask_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_CreateTask_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_CreateTask_Call) RunAndReturn(run func(ctx context.Context, req *dto.TaskCreateRequest, userID string) (*dto.MessageResponse, error)) *MockHandler_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskWrapped provides a mock function for the type MockHandler
func (_mock *MockHandler) CreateTaskWrapped(ctx context.Context, req *dto.TaskCreateRequest) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskWrapped")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskCreateRequest) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskCreateRequest) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.TaskCreateRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_CreateTaskWrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskWrapped'
type MockHandler_CreateTaskWrapped_Call struct {
	*mock.Call
}

// CreateTaskWrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.TaskCreateRequest
func (_e *MockHandler_Expecter) CreateTaskWrapped(ctx interface{}, req interface{}) *MockHandler_CreateTaskWrapped_Call {
	return &MockHandler_CreateTaskWrapped_Call{Call: _e.mock.On("CreateTaskWrapped", ctx, req)}
}

func (_c *MockHandler_CreateTaskWrapped_Call) Run(run func(ctx context.Context, req *dto.TaskCreateRequest)) *MockHandler_CreateTaskWrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.TaskCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.TaskCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_CreateTaskWrapped_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_CreateTaskWrapped_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_CreateTaskWrapped_Call) RunAndReturn(run func(ctx context.Context, req *dto.TaskCreateRequest) (*dto.MessageResponse, error)) *MockHandler_CreateTaskWrapped_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTaskByID provides a mock function for the type MockHandler
func (_mock *MockHandler) DeleteTaskByID(ctx context.Context, taskID string, userID string) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskByID")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, taskID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, taskID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, taskID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_DeleteTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTaskByID'
type MockHandler_DeleteTaskByID_Call struct {
	*mock.Call
}

// DeleteTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - userID string
func (_e *MockHandler_Expecter) DeleteTaskByID(ctx interface{}, taskID interface{}, userID interface{}) *MockHandler_DeleteTaskByID_Call {
	return &MockHandler_DeleteTaskByID_Call{Call: _e.mock.On("DeleteTaskByID", ctx, taskID, userID)}
}

func (_c *MockHandler_DeleteTaskByID_Call) Run(run func(ctx context.Context, taskID string, userID string)) *MockHandler_DeleteTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHandler_DeleteTaskByID_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_DeleteTaskByID_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_DeleteTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, userID string) (*dto.MessageResponse, error)) *MockHandler_DeleteTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTaskByIDWrapped provides a mock function for the type MockHandler
func (_mock *MockHandler) DeleteTaskByIDWrapped(ctx context.Context, req *dto.TaskDeleteRequest) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskByIDWrapped")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskDeleteRequest) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskDeleteRequest) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.TaskDeleteRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_DeleteTaskByIDWrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTaskByIDWrapped'
type MockHandler_DeleteTaskByIDWrapped_Call struct {
	*mock.Call
}

// DeleteTaskByIDWrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.TaskDeleteRequest
func (_e *MockHandler_Expecter) DeleteTaskByIDWrapped(ctx interface{}, req interface{}) *MockHandler_DeleteTaskByIDWrapped_Call {
	return &MockHandler_DeleteTaskByIDWrapped_Call{Call: _e.mock.On("DeleteTaskByIDWrapped", ctx, req)}
}

func (_c *MockHandler_DeleteTaskByIDWrapped_Call) Run(run func(ctx context.Context, req *dto.TaskDeleteRequest)) *MockHandler_DeleteTaskByIDWrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.TaskDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.TaskDeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_DeleteTaskByIDWrapped_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_DeleteTaskByIDWrapped_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_DeleteTaskByIDWrapped_Call) RunAndReturn(run func(ctx context.Context, req *dto.TaskDeleteRequest) (*dto.MessageResponse, error)) *MockHandler_DeleteTaskByIDWrapped_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function for the type MockHandler
func (_mock *MockHandler) GetTaskByID(ctx context.Context, taskID string, userID string) (*dto.TaskResponse, error) {
	ret := _mock.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *dto.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*dto.TaskResponse, error)); ok {
		return returnFunc(ctx, taskID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *dto.TaskResponse); ok {
		r0 = returnFunc(ctx, taskID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TaskResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, taskID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockHandler_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - userID string
func (_e *MockHandler_Expecter) GetTaskByID(ctx interface{}, taskID interface{}, userID interface{}) *MockHandler_GetTaskByID_Call {
	return &MockHandler_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, taskID, userID)}
}

func (_c *MockHandler_GetTaskByID_Call) Run(run func(ctx context.Context, taskID string, userID string)) *MockHandler_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHandler_GetTaskByID_Call) Return(taskResponse *dto.TaskResponse, err error) *MockHandler_GetTaskByID_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockHandler_GetTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, userID string) (*dto.TaskResponse, error)) *MockHandler_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByIDWrapped provides a mock function for the type MockHandler
func (_mock *MockHandler) GetTaskByIDWrapped(ctx context.Context, req *dto.TaskGetByIDRequest) (*dto.TaskResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByIDWrapped")
	}

	var r0 *dto.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskGetByIDRequest) (*dto.TaskResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskGetByIDRequest) *dto.TaskResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TaskResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.TaskGetByIDRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_GetTaskByIDWrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByIDWrapped'
type MockHandler_GetTaskByIDWrapped_Call struct {
	*mock.Call
}

// GetTaskByIDWrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.TaskGetByIDRequest
func (_e *MockHandler_Expecter) GetTaskByIDWrapped(ctx interface{}, req interface{}) *MockHandler_GetTaskByIDWrapped_Call {
	return &MockHandler_GetTaskByIDWrapped_Call{Call: _e.mock.On("GetTaskByIDWrapped", ctx, req)}
}

func (_c *MockHandler_GetTaskByIDWrapped_Call) Run(run func(ctx context.Context, req *dto.TaskGetByIDRequest)) *MockHandler_GetTaskByIDWrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.TaskGetByIDRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.TaskGetByIDRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_GetTaskByIDWrapped_Call) Return(taskResponse *dto.TaskResponse, err error) *MockHandler_GetTaskByIDWrapped_Call {
	_c.Call.Return(taskResponse, err)
	return _c
}

func (_c *MockHandler_GetTaskByIDWrapped_Call) RunAndReturn(run func(ctx context.Context, req *dto.TaskGetByIDRequest) (*dto.TaskResponse, error)) *MockHandler_GetTaskByIDWrapped_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByUserID provides a mock function for the type MockHandler
func (_mock *MockHandler) GetTasksByUserID(ctx context.Context, userID string) ([]dto.TaskResponse, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByUserID")
	}

	var r0 []dto.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]dto.TaskResponse, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []dto.TaskResponse); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TaskResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_GetTasksByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByUserID'
type MockHandler_GetTasksByUserID_Call struct {
	*mock.Call
}

// GetTasksByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockHandler_Expecter) GetTasksByUserID(ctx interface{}, userID interface{}) *MockHandler_GetTasksByUserID_Call {
	return &MockHandler_GetTasksByUserID_Call{Call: _e.mock.On("GetTasksByUserID", ctx, userID)}
}

func (_c *MockHandler_GetTasksByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockHandler_GetTasksByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_GetTasksByUserID_Call) Return(taskResponses []dto.TaskResponse, err error) *MockHandler_GetTasksByUserID_Call {
	_c.Call.Return(taskResponses, err)
	return _c
}

func (_c *MockHandler_GetTasksByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]dto.TaskResponse, error)) *MockHandler_GetTasksByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksByUserIDWrapped provides a mock function for the type MockHandler
func (_mock *MockHandler) GetTasksByUserIDWrapped(ctx context.Context, v any) ([]dto.TaskResponse, error) {
	ret := _mock.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByUserIDWrapped")
	}

	var r0 []dto.TaskResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) ([]dto.TaskResponse, error)); ok {
		return returnFunc(ctx, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) []dto.TaskResponse); ok {
		r0 = returnFunc(ctx, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TaskResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_GetTasksByUserIDWrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksByUserIDWrapped'
type MockHandler_GetTasksByUserIDWrapped_Call struct {
	*mock.Call
}

// GetTasksByUserIDWrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - v any
func (_e *MockHandler_Expecter) GetTasksByUserIDWrapped(ctx interface{}, v interface{}) *MockHandler_GetTasksByUserIDWrapped_Call {
	return &MockHandler_GetTasksByUserIDWrapped_Call{Call: _e.mock.On("GetTasksByUserIDWrapped", ctx, v)}
}

func (_c *MockHandler_GetTasksByUserIDWrapped_Call) Run(run func(ctx context.Context, v any)) *MockHandler_GetTasksByUserIDWrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_GetTasksByUserIDWrapped_Call) Return(taskResponses []dto.TaskResponse, err error) *MockHandler_GetTasksByUserIDWrapped_Call {
	_c.Call.Return(taskResponses, err)
	return _c
}

func (_c *MockHandler_GetTasksByUserIDWrapped_Call) RunAndReturn(run func(ctx context.Context, v any) ([]dto.TaskResponse, error)) *MockHandler_GetTasksByUserIDWrapped_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskByID provides a mock function for the type MockHandler
func (_mock *MockHandler) UpdateTaskByID(ctx context.Context, taskID string, req *dto.TaskUpdateRequest, userID string) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, taskID, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByID")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *dto.TaskUpdateRequest, string) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, taskID, req, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *dto.TaskUpdateRequest, string) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, taskID, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *dto.TaskUpdateRequest, string) error); ok {
		r1 = returnFunc(ctx, taskID, req, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_UpdateTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskByID'
type MockHandler_UpdateTaskByID_Call struct {
	*mock.Call
}

// UpdateTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - req *dto.TaskUpdateRequest
//   - userID string
func (_e *MockHandler_Expecter) UpdateTaskByID(ctx interface{}, taskID interface{}, req interface{}, userID interface{}) *MockHandler_UpdateTaskByID_Call {
	return &MockHandler_UpdateTaskByID_Call{Call: _e.mock.On("UpdateTaskByID", ctx, taskID, req, userID)}
}

func (_c *MockHandler_UpdateTaskByID_Call) Run(run func(ctx context.Context, taskID string, req *dto.TaskUpdateRequest, userID string)) *MockHandler_UpdateTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *dto.TaskUpdateRequest
		if args[2] != nil {
			arg2 = args[2].(*dto.TaskUpdateRequest)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHandler_UpdateTaskByID_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_UpdateTaskByID_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_UpdateTaskByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, req *dto.TaskUpdateRequest, userID string) (*dto.MessageResponse, error)) *MockHandler_UpdateTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskByIDWrapped provides a mock function for the type MockHandler
func (_mock *MockHandler) UpdateTaskByIDWrapped(ctx context.Context, req *dto.TaskUpdateWithIDRequest) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByIDWrapped")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskUpdateWithIDRequest) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskUpdateWithIDRequest) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.TaskUpdateWithIDRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_UpdateTaskByIDWrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskByIDWrapped'
type MockHandler_UpdateTaskByIDWrapped_Call struct {
	*mock.Call
}

// UpdateTaskByIDWrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.TaskUpdateWithIDRequest
func (_e *MockHandler_Expecter) UpdateTaskByIDWrapped(ctx interface{}, req interface{}) *MockHandler_UpdateTaskByIDWrapped_Call {
	return &MockHandler_UpdateTaskByIDWrapped_Call{Call: _e.mock.On("UpdateTaskByIDWrapped", ctx, req)}
}

func (_c *MockHandler_UpdateTaskByIDWrapped_Call) Run(run func(ctx context.Context, req *dto.TaskUpdateWithIDRequest)) *MockHandler_UpdateTaskByIDWrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.TaskUpdateWithIDRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.TaskUpdateWithIDRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_UpdateTaskByIDWrapped_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_UpdateTaskByIDWrapped_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_UpdateTaskByIDWrapped_Call) RunAndReturn(run func(ctx context.Context, req *dto.TaskUpdateWithIDRequest) (*dto.MessageResponse, error)) *MockHandler_UpdateTaskByIDWrapped_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskStatusByID provides a mock function for the type MockHandler
func (_mock *MockHandler) UpdateTaskStatusByID(ctx context.Context, taskID string, req *dto.TaskUpdateStatusRequest, userID string) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, taskID, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatusByID")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *dto.TaskUpdateStatusRequest, string) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, taskID, req, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *dto.TaskUpdateStatusRequest, string) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, taskID, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *dto.TaskUpdateStatusRequest, string) error); ok {
		r1 = returnFunc(ctx, taskID, req, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_UpdateTaskStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskStatusByID'
type MockHandler_UpdateTaskStatusByID_Call struct {
	*mock.Call
}

// UpdateTaskStatusByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - req *dto.TaskUpdateStatusRequest
//   - userID string
func (_e *MockHandler_Expecter) UpdateTaskStatusByID(ctx interface{}, taskID interface{}, req interface{}, userID interface{}) *MockHandler_UpdateTaskStatusByID_Call {
	return &MockHandler_UpdateTaskStatusByID_Call{Call: _e.mock.On("UpdateTaskStatusByID", ctx, taskID, req, userID)}
}

func (_c *MockHandler_UpdateTaskStatusByID_Call) Run(run func(ctx context.Context, taskID string, req *dto.TaskUpdateStatusRequest, userID string)) *MockHandler_UpdateTaskStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *dto.TaskUpdateStatusRequest
		if args[2] != nil {
			arg2 = args[2].(*dto.TaskUpdateStatusRequest)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHandler_UpdateTaskStatusByID_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_UpdateTaskStatusByID_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_UpdateTaskStatusByID_Call) RunAndReturn(run func(ctx context.Context, taskID string, req *dto.TaskUpdateStatusRequest, userID string) (*dto.MessageResponse, error)) *MockHandler_UpdateTaskStatusByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskStatusByIDWrapped provides a mock function for the type MockHandler
func (_mock *MockHandler) UpdateTaskStatusByIDWrapped(ctx context.Context, req *dto.TaskUpdateStatusWithIDRequest) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatusByIDWrapped")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskUpdateStatusWithIDRequest) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.TaskUpdateStatusWithIDRequest) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.TaskUpdateStatusWithIDRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_UpdateTaskStatusByIDWrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskStatusByIDWrapped'
type MockHandler_UpdateTaskStatusByIDWrapped_Call struct {
	*mock.Call
}

// UpdateTaskStatusByIDWrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.TaskUpdateStatusWithIDRequest
func (_e *MockHandler_Expecter) UpdateTaskStatusByIDWrapped(ctx interface{}, req interface{}) *MockHandler_UpdateTaskStatusByIDWrapped_Call {
	return &MockHandler_UpdateTaskStatusByIDWrapped_Call{Call: _e.mock.On("UpdateTaskStatusByIDWrapped", ctx, req)}
}

func (_c *MockHandler_UpdateTaskStatusByIDWrapped_Call) Run(run func(ctx context.Context, req *dto.TaskUpdateStatusWithIDRequest)) *MockHandler_UpdateTaskStatusByIDWrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.TaskUpdateStatusWithIDRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.TaskUpdateStatusWithIDRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_UpdateTaskStatusByIDWrapped_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_UpdateTaskStatusByIDWrapped_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_UpdateTaskStatusByIDWrapped_Call) RunAndReturn(run func(ctx context.Context, req *dto.TaskUpdateStatusWithIDRequest) (*dto.MessageResponse, error)) *MockHandler_UpdateTaskStatusByIDWrapped_Call {
	_c.Call.Return(run)
	return _c
}
