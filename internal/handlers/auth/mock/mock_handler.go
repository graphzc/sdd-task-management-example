// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_auth

import (
	"context"

	"github.com/graphzc/sdd-task-management-example/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockHandler
func (_mock *MockHandler) Login(ctx context.Context, req *dto.UserLoginRequest) (*dto.UserLoginResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.UserLoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserLoginRequest) (*dto.UserLoginResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserLoginRequest) *dto.UserLoginResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserLoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.UserLoginRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockHandler_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UserLoginRequest
func (_e *MockHandler_Expecter) Login(ctx interface{}, req interface{}) *MockHandler_Login_Call {
	return &MockHandler_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockHandler_Login_Call) Run(run func(ctx context.Context, req *dto.UserLoginRequest)) *MockHandler_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.UserLoginRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.UserLoginRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_Login_Call) Return(userLoginResponse *dto.UserLoginResponse, err error) *MockHandler_Login_Call {
	_c.Call.Return(userLoginResponse, err)
	return _c
}

func (_c *MockHandler_Login_Call) RunAndReturn(run func(ctx context.Context, req *dto.UserLoginRequest) (*dto.UserLoginResponse, error)) *MockHandler_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockHandler
func (_mock *MockHandler) Register(ctx context.Context, req *dto.UserRegisterRequest) (*dto.MessageResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.MessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserRegisterRequest) (*dto.MessageResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserRegisterRequest) *dto.MessageResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.UserRegisterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHandler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockHandler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UserRegisterRequest
func (_e *MockHandler_Expecter) Register(ctx interface{}, req interface{}) *MockHandler_Register_Call {
	return &MockHandler_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockHandler_Register_Call) Run(run func(ctx context.Context, req *dto.UserRegisterRequest)) *MockHandler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.UserRegisterRequest
		if args[1] != nil {
			arg1 = args[1].(*dto.UserRegisterRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_Register_Call) Return(messageResponse *dto.MessageResponse, err error) *MockHandler_Register_Call {
	_c.Call.Return(messageResponse, err)
	return _c
}

func (_c *MockHandler_Register_Call) RunAndReturn(run func(ctx context.Context, req *dto.UserRegisterRequest) (*dto.MessageResponse, error)) *MockHandler_Register_Call {
	_c.Call.Return(run)
	return _c
}
