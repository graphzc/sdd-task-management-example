// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_middlewares

import (
	"github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthMiddleware creates a new instance of MockAuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthMiddleware is an autogenerated mock type for the AuthMiddleware type
type MockAuthMiddleware struct {
	mock.Mock
}

type MockAuthMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthMiddleware) EXPECT() *MockAuthMiddleware_Expecter {
	return &MockAuthMiddleware_Expecter{mock: &_m.Mock}
}

// Middleware provides a mock function for the type MockAuthMiddleware
func (_mock *MockAuthMiddleware) Middleware(next echo.HandlerFunc) echo.HandlerFunc {
	ret := _mock.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Middleware")
	}

	var r0 echo.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func(echo.HandlerFunc) echo.HandlerFunc); ok {
		r0 = returnFunc(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}
	return r0
}

// MockAuthMiddleware_Middleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Middleware'
type MockAuthMiddleware_Middleware_Call struct {
	*mock.Call
}

// Middleware is a helper method to define mock.On call
//   - next echo.HandlerFunc
func (_e *MockAuthMiddleware_Expecter) Middleware(next interface{}) *MockAuthMiddleware_Middleware_Call {
	return &MockAuthMiddleware_Middleware_Call{Call: _e.mock.On("Middleware", next)}
}

func (_c *MockAuthMiddleware_Middleware_Call) Run(run func(next echo.HandlerFunc)) *MockAuthMiddleware_Middleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 echo.HandlerFunc
		if args[0] != nil {
			arg0 = args[0].(echo.HandlerFunc)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthMiddleware_Middleware_Call) Return(handlerFunc echo.HandlerFunc) *MockAuthMiddleware_Middleware_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockAuthMiddleware_Middleware_Call) RunAndReturn(run func(next echo.HandlerFunc) echo.HandlerFunc) *MockAuthMiddleware_Middleware_Call {
	_c.Call.Return(run)
	return _c
}
